#### Questions

1. What is a hash table?

A: Hash tables are a type of data structure that store values in keys which are used to reference the values when that specific key is referenced

2. What is hashing?

A: Hashing is the process of converting a string to a numerical index

3. How does a hash table store data?

A: A hash table stores data by separating each object with a unique ID

4.How are hash tables and objects different?

A: Hash tables and objects are different because

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
 * A list of pets and their unique names.

A: Hash table

 * The name, age, and the birthday of your best friend.

A: Object

* The name and location of every company in a given city.

A: Hash table

* All of the books checked out from a library by a particular individual.

A: Hash table

* The primary and secondary phone numbers for a contact.

A: Object

> Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a    hash table.

A:

var hash = (string, max) => {
  var hash = 0;
  for (var i =0; i <= string.length; i++){
    hash += string.charAt(i);
}
return hash % max;
};

let HashTable = function() {
  let storage = [];
  const storageLimit = 80;

  this.print = function() {
    console.log(storage);
  };

  this.add = function(phone, name, customerAddress){
    var index = hash(phone, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [ [phone, name, customerAddress]
      ];
    } else {
      var input = false;
      for (var i =0; i < storage[index].length; i++) {
        if (storage[index][i][0] === phone) {
          storage[index][i][1] = name;
          storage[index][i][2] = customerAddress;
          input = true;
      }
    }
    if (input === false){
      storage[index].push([phone, name, customerAddress]);
    }
  }
};

 this.lookup =  function(phone) {
   let index = hash(phone, storageLimit);
   if(storage[index] === undefined) {
     return "Customer has not been created";
   } else {
     for (let i = 0; i < storage[index].length; i++) {
       if (storage[index][i][0] === phone) {
         return storage[index][i][0] + ", " + storage[index][i][1] + ", " + storage[index][i][2];
       } else {
         return "Customer does not exist"
       }
     }
   }
 };

var customers = new HashTable();
customers.add('123-456-7890', 'Trevor', '1434 Lillian');
console.log(customers.lookup('123-456-7890'));

> Build a system that allows a store owner to track their store's inventory using a hash table for storage.

A:
class HashTable {
  constructor(items){
    this.hashTableSize = 100;
    this.storage = [];
  };

  hash(key){
    let hash = 0;
    for(let i = 0; i < key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % this.hashTableSize;
  };

  add(key, value){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          this.storage[index][i][1] = value;
          duplicate = true;
        }
      }
      if(duplicate === false){
        this.storage[index].push([key, value]);
      }
    }
  };

  getItems(key){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      return false;
    } else {
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          return this.storage[index][i][1];
        }
      }
    }
  };

  hasItem(key){
    return this.getItems(key) !== false;
  };

  remove(key){
    let index = this.hash(key);
    if(this.storage[index].length === 1 && this.storage[index][0][0] === key){
      delete this.storage[index];
    } else {
      for(let i = 0; i < this.storage[index]; i++){
        if(this.storage[index][i][0] === key){
          delete this.storage[index][i];
        }
      }
    }
  };

  print(){
    return this.storage.filter(items => items !== undefined);
  };
};

class Inventory {
  constructor(items){
    this.inventory = new HashTable(items);
  }

  addItem({item, amount}){
    let number = this.inventory.hasItem(item) ?      this.inventory.getItems(item) + amount : amount;
    console.log(amount)
    this.inventory.add(item, number);
  }

  removeItem({item, amount}){
    if(this.inventory.hasItem(item)){
      if(this.inventory.getItems(item) - amount >= 0){
        let number = this.inventory.getItems(item) - amount;
        this.inventory.add(item, number);
      } else {
      console.log("not enough " + item + " in stock");
      }
    } else {
    console.log("Item not in stock")
    }
  }

  getInventory(){
    return this.inventory.print();
  }
}

let inventory = new Inventory;

inventory.addItem({
  item: 'footballs',
  amount: 30
});

inventory.addItem({
  item: 'soccer balls',
  amount: 4
});

inventory.addItem({
  item: 'golf balls',
  amount: 11
});

inventory.addItem({
  item: 'tennis balls',
  amount: 20
});

inventory.removeItem({
  item: 'basketballs',
  amount: 5
});

inventory.removeItem({
  amount: 'soccer balls',
  item: 2
});

console.log(inventory.getInventory())

> Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

A:

function hash(key, size) {
  let hash = 0;
  for (let i = 0; i < key.length; i++) {
    hash += key.charCodeAt(i);
  }
  return hash % size;
}

function hashTableByPublisher() {
  let storage = [];
  const storageLimit = 500;

  this.add = function(publisher, publicationDate) {
    let index = hash(publisher, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [[publisher, publicationDate]];
    }
  };

  this.lookupByPublisher = function(publisher) {
    let index = hash(publisher, storageLimit);
    if (storage[index] === undefined) {
      return "Publication Date not entered"
    } else {
      for (i = 0 ; i < storage[index].length; i++) {
        if(storage[index][i][0] === publisher) {
          return "Publisher: " + storage[index][i][0] + ", Publication Date: " + storage[index][i][1];
        } else {
          return "Publisher not found"
        }
      }
    }
  };
};

function hashTableByDate() {
  let storage = [];
  const storageLimit = 500;

  this.add = function(publisher, publicationDate) {
    let index = hash(publicationDate, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [[publisher, publicationDate]];
    }
  };

  this.lookupByDate = function(publicationDate) {
    let index = hash(publicationDate, storageLimit);
    if (storage[index] === undefined) {
      return "Publisher not entered"
    } else {
      for (i = 0 ; i < storage[index].length; i++) {
        if(storage[index][i][1] === publicationDate) {
          return "Publisher: " + storage[index][i][0] + ", Publication Date: " + storage[index][i][1];
        } else {
          return "Date not found"
        }
      }
    }
  };
};

let newspaper = new hashTableByPublisher();
let newspaperDates = new hashTableByDate();

newspaper.add("USA Today", "2001");
newspaper.add("New York Daily News", "2000");
newspaper.add("NY Times", "2010");

newspaperDates.add("USA Today", "2001");
newspaperDates.add("New York Daily News", "2005");
newspaperDates.add("NY Times", "2010");

console.log(newspaper.lookupByPublisher("USA Today"));
console.log(newspaper.lookupByPublisher("New York Daily News"));
console.log(newspaperDates.lookupByDate("2001"));

