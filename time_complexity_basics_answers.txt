1. What is time complexity and what is its relation to algorithms?

A: Time complexity is a function that estimates how long it will take for an algorithm to run based on the size of algorithm inputs

2. What is runtime?

A: Runtime is the result of the time complexity function, how long it takes for the program to run

3. How is the runtime of an algorithm calculated?

A: The runtime of an algorithm is calculated by counting the number of operations performed by the algorithm, assuming that each operation takes a fixed amount of time.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A:

* Linear growth rate, O(1)
* Logarithmic growth rate, O(log n)
* Linear growth rate, O(n)
* Log-Linear growth rate, O(n log n)
* Quadratic growth rate, O(n^2)
* Polynomial growth rate, O(n^k)
* Exponential growth rate, O(2^n)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: Exponential growth can be compared to a snowball that doesnt start increasing in size quickly at first but as it gets bigger, it gathers more snow faster

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n)

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?

A: The linearSearch function is the most time efficient because it only requires n for the O function
